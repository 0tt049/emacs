
* Intro

This directory structure is there to support packaged lisp files in
core emacs, as well as linking through to ELPA.

The main drivers for this are:

 - Most Emacs Lisp is developed and distributed as package.el
   packages, so adding support just makes life easier.
 - Packaged files are self-contained.
 - Source files and Tests can be distributed together.
 - Some packages are both in ELPA and core. Currently these are
   largely merged into core. With this directory structure, we should
   be able to git subtree these into here from ELPA.

* Design

Currently, there is a single directory "core" inside "package"
containing packages. These are build and tested from makefile, using
an autogenerated makefile.

The intention here is that different directories can be used to group
packages probably by policy -- those which are core only, those which
are also available in ELPA and so on.

* Techniques for Sharing between ELPA and Core

At the moment, it is not clear what is the best way to share files
between the core build and ELPA. Essentially, the build on this fork
makes the assumption that ELPA source available within the directory
structure. So how to get the files here.

** Using Package.el download

By the time we build this, Emacs is all ready to go, so we could use
package.el to install a set of packages into the build.

Pro:

 - Packages will be build and installed from ELPA in only one way

Con:
 
 - Difficult to achieve a reproducible build, as it depends on the
   state of ELPA which changes over time.


** Using an ELPA git checkout

We can pick up files from an ELPA git checkout; we have partial
support for this already, although the original intention for this was
to support integration testing.

Pro:
 - Nice and simple

Con:
 - Emacs and ELPA checkout versions would have to be linked to ensure
   reproducible build. Could add a checkout elpa target to help with
   this, although, obtaining ELPA requires checkouts from multiple
   branches, due to externals.


** Using git submodule/subtree/subrepo

Use one of these tools pull a subdirectory of ELPA into Emacs.

Pro:
 - Someone else does the work of syncing the source

Con:
 - submodule and subtree work, but only sort of

Unknown:
 - Can we include different packages at different versions

** Other git cleverness

Something like git-archive or git-checkout-index to grab the files
from ELPA.


* Limitations

It is not expected that all files would ever be in this directory
structure. Emacs must be fully built from bootstrap, and all the files
necessary for this cannot be here.


* Changes outside of this directory

 - Makefile.in -- now includes package as a subdir
 - test/Makefile.in -- now drives tests in package also
 - .gitignore -- remove a couple of things (including "core")
 - lisp/emacs-lisp/package.el -- force load of package directory

* Status

Packages now build, test and summarise correctly.

Preliminary ELPA support has been added also, but is currently
hardcoded. Most of these do not have regular test file locations at
the moment.

* Things to do

There is no support for make install.

There is no support for info.

Files in the "admin" directory should probably be in the emacs-root admin.

* Bugs

package.el does not initialize when emacs is launched with -q. This is
somewhat problematic, since packages in the "core" dir should probably
always be loaded. Unfortunately package.el is either initialized or
not -- it can be done just for one directory. Currently this means
that if files were moved from the "lisp" directory to the "package"
directory, they would disappear under "emacs -q", until
package-initialize is called.
