@c This is part of the Emacs manual.
@c Copyright (C) 2023 Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Other Input Devices
@appendix Emacs and unconventional input devices
@cindex other input devices

  Emacs was originally developed with the assumption that users will
be sitting in front of a desktop computer, with a keyboard and perhaps
a suitable pointing device such as a mouse.

  However, recent developments in the X Window System, and in other
operating systems such as Android, mean that this assumption no longer
holds true.  As a result, Emacs now has support for other kinds of
input devices, which is detailed here.

@menu
* Touchscreens::		Using Emacs on touchscreens.
* On-Screen Keyboards::		Using Emacs with virtual keyboards.
@end menu

@node Touchscreens
@section Using Emacs on touchscreens
@cindex touchscreens

  Touchscreen input works by having the user press tools onto the
screen, which can be his own fingers, or a pointing device such as a
stylus, in order to manipulate the contents there in.

  When running under the X Window System or Android, Emacs
automatically detects and maps the following touchscreen gestures to
common actions:

@itemize @bullet
@item
@cindex tapping, touchscreens
  ``Tapping'', meaning to briefly place and lift a tool from the
display, will result in Emacs selecting the window that was tapped,
and executing any command bound to @code{mouse-1} at that location in
the window.  If the tap happened on top of a link (@pxref{Mouse
References}), then Emacs will follow the link instead.

@item
@cindex scrolling, touchscreens
  ``Scrolling'', meaning to place a tool on the display and move it up
or down, will result in Emacs scrolling the window contents in the
direction where the tool moves.

@item
@cindex dragging, touchscreens
  ``Dragging'', meaning to place a tool on the display and leave it
there for a while before moving the tool around, will make Emacs set
the point to where the tool was and begin selecting text under the
tool as it moves around, much like what would happen if @code{mouse-1}
were to be held down.  @xref{Mouse Commands}.
@end itemize

@vindex touch-screen-delay
  By default, Emacs considers a tool as having been left on the
display for a while after 0.7 seconds, but this can be changed by
customizing the variable @code{touch-screen-delay}.

@node On-Screen Keyboards
@section Using Emacs with virtual keyboards
@cindex virtual keyboards
@cindex on-screen keyboards

  When there is no physical keyboard attached to a system, the
windowing system typically provides an on-screen keyboard, more often
known as a ``virtual keyboard'', containing rows of clickable buttons
that send keyboard input to the application, much like a real keyboard
would.  This virtual keyboard is hidden by default, as it uses up
valuable on-screen real estate, and must be opened once the program
being used is ready to accept keyboard input.

  Under the X Window System, the client that provides the on-screen
keyboard typically detects when the application is ready to accept
keyboard input through a set of complex heuristics, and automatically
displays the keyboard when necessary.

  On other systems such as Android, Emacs must tell the system when it
is ready to accept keyboard input.  Typically, this is done in
response to a touchscreen ``tap'' gesture (@pxref{Touchscreens}), or
once to the minibuffer becomes in use (@pxref{Minibuffer}.)

@vindex touch-screen-set-point-commands
  When a ``tap'' gesture results in a command being executed, Emacs
checks to see whether or not the command is supposed to set the point
by looking for it in the list @code{touch-screen-set-point-commands}.
If it is, then Emacs looks up whether or not the text under the point
is read-only; if not, it activates the on-screen keyboard, assuming
that the user is about to enter text in to the current buffer.

  Emacs also provides a set of functions to show or hide the on-screen
keyboard.  For more details, @pxref{On-Screen Keyboards,,, elisp, The
Emacs Lisp Reference Manual}.
